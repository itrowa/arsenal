;;; assume we have make-rat, numer, denom functions.

;; 定义有理数的四则运算过程.

(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (demon x) (denom y)) ) )

(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (demon x) (denom y)) ) )

(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))

(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))


(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))


;; ++++++++++++++++++++++++++++++++++++++++++++++++++
;; abstractction barrier
;; ++++++++++++++++++++++++++++++++++++++++++++++++++

;; next is to consider how to construct rat.

;; 导入gcd(最大公约数)过程的定义.
(load "ch1_gcd.scm") 

;; constructor
;; 特点: 1.将分数归约至最简形式;
;;       2.正确处理负数: 当分子分母都是负时, 构造出的应该
;;       分子分母都处理为正. 只有一个为负时,只让分子为负.
(define (make-rat n d)
  (let (g (gcd n d))
    (cond (/ n g) (/ d g))))

;; selector
(define (numer x) (car x))
(define (denom x) (cdr x))

;; 辅助函数, 用于方便浏览
(define (print-rat x) 
	(newline) ; 随后的打印会在新的一行产生
	(display (numer x))
	(newline) 
	(display "------")
	(newline) 
	(display (denom x)))



;; example
;;
(define (one-half) (make-rat 1 2))
(define (one-third) (make-rat 1 3))
(print-rat one-half)
(print-rat one-third)


